{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","color","id","this","props","account","Component","Main","_this","onSubmit","event","preventDefault","name","roomName","value","price","window","web3","utils","toWei","roomPrice","toString","createRoom","type","ref","input","placeholder","required","scope","rooms","map","room","key","fromWei","owner","purchased","class","onClick","purchaseRoom","target","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","roomCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","Hotel","networks","hotel","Contract","abi","address","methods","i","concat","toConsumableArray","_this2","send","from","once","receipt","_this3","components_Navbar","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab10bd11.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n       <h3><font color=\"white\">Hotel Management </font> </h3>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\"><span id=\"account\">{this.props.account}</span></small>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div id=\"content\">\n        <font color=\"white\"><h1>Add New Room</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          const name = this.roomName.value\n          const price = window.web3.utils.toWei(this.roomPrice.value.toString(), 'Ether')\n          this.props.createRoom(name, price)\n        }}>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"roomName\"\n              type=\"text\"\n              ref={(input) => { this.roomName = input }}\n              className=\"form-control\"\n              placeholder=\"Room number\"\n              required />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"roomPrice\"\n              type=\"text\"\n              ref={(input) => { this.roomPrice = input }}\n              className=\"form-control\"\n              placeholder=\" Price\"\n              required />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">Add Room</button>\n        </form>\n        <p>&nbsp;</p>\n        <h2><l>List of Rooms</l></h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\"><font color=\"white\">#</font></th>\n              <th scope=\"col\"><font color=\"white\">Name</font></th>\n              <th scope=\"col\"><font color=\"white\">Price</font></th>\n              <th scope=\"col\"><font color=\"white\">Owner</font></th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody id=\"roomList\">\n            { this.props.rooms.map((room, key) => {\n              return(\n                <tr key={key}>\n                 <th scope=\"row\">{room.id.toString()}</th>\n                   <td>{room.name}</td>\n                   <td>{window.web3.utils.fromWei(room.price.toString(), 'Ether')} Eth</td>\n                  <td>{room.owner}</td>\n                  <td>\n                    { !room.purchased\n                      ? <button class=\"button\"\n                          name={room.id}\n                          value={room.price}\n                          onClick={(event) => {\n                            this.props.purchaseRoom(event.target.name, event.target.value)\n                          }}\n                        >\n                          Buy A Room\n                        </button>\n                      : null\n                    }\n                    </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table></font>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Web3 from 'web3'\n//import logo from '../logo.png';\nimport './App.css';\nimport Hotel from '../abis/Hotel.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Hotel.networks[networkId]\n    if(networkData) {\n      const hotel = web3.eth.Contract(Hotel.abi, networkData.address)\n      this.setState({ hotel })\n      const roomCount = await hotel.methods.roomCount().call()\n      this.setState({ roomCount })\n      // Load rooms\n      for (var i = 1; i <= roomCount; i++) {\n        const room = await hotel.methods.rooms(i).call()\n        this.setState({\n          rooms: [...this.state.rooms, room]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('Hotel contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      roomCount: 0,\n      rooms: [],\n      loading: true\n    }\n\n    this.createRoom = this.createRoom.bind(this)\n    this.purchaseRoom = this.purchaseRoom.bind(this)\n  }\n\n  createRoom(name, price) {\n    this.setState({ loading: true })\n    this.state.hotel.methods.createRoom(name, price).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  purchaseRoom(id, price) {\n    this.setState({ loading: true })\n    this.state.hotel.methods.purchaseRoom(id).send({ from: this.state.account, value: price })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              { this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : <Main\n                  rooms={this.state.rooms}\n                  createRoom={this.createRoom}\n                  purchaseRoom={this.purchaseRoom} />\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}